const { faker } = require('@faker-js/faker');
const fs = require('fs');
const _ = require('lodash');

//var duckdb = require('duckdb');
//
let csv_schema = {
    "RenaissanceClientID": faker.string.uuid().slice(0,8).toUpperCase(),
    "SchoolYear":faker.date.recent(),
    "SchoolYearStartDate":faker.date.recent(),
    "SchoolYearEndDate":faker.date.recent(),
    "StudentRenaissanceID":faker.date.recent(),
    "StudentSourcedID":faker.date.recent(),
    "StudentIdentifier":faker.date.recent(),
    "StudentUserID":faker.date.recent(),
    "StudentEmail":faker.date.recent(),
    "StudentFirstName":faker.date.recent(),
    "StudentMiddleName":faker.date.recent(),
    "StudentLastName":faker.date.recent(),
    "Gender":faker.date.recent(),
    "BirthDate":faker.date.recent(),
    "MultiRace":faker.date.recent(),
    "HispanicOrLatino":faker.date.recent(),
    "AmericanIndianOrAlaskaNative":faker.date.recent(),
    "Asian":faker.date.recent(),
    "BlackOrAfricanAmerican":faker.date.recent(),
    "NativeHawaiianOrOtherPacificIslander":faker.date.recent(),
    "White":faker.date.recent(),
    "CurrentGrade":faker.date.recent(),
    "EnrollmentStatus":faker.date.recent(),
    "DistrictRenaissanceID":faker.date.recent(),
    "DistrictSourcedID":faker.date.recent(),
    "DistrictIdentifier":faker.date.recent(),
    "DistrictStateID":faker.date.recent(),
    "DistrictName":faker.date.recent(),
    "SchoolRenaissanceID":faker.date.recent(),
    "SchoolSourcedID":faker.date.recent(),
    "SchoolStateID":faker.date.recent(),
    "SchoolName":faker.date.recent(),
    "CourseRenaissanceID":faker.date.recent(),
    "CourseSourcedID":faker.date.recent(),
    "CourseCode":faker.date.recent(),
    "CourseName":faker.date.recent(),
    "ClassRenaissanceID":faker.date.recent(),
    "ClassSourcedID":faker.date.recent(),
    "ClassCode":faker.date.recent(),
    "GroupID":faker.date.recent(),
    "GroupOrClassName":faker.date.recent(),
    "TeacherRenaissanceID":faker.date.recent(),
    "TeacherSourcedID":faker.date.recent(),
    "TeacherIdentifier":faker.date.recent(),
    "TeacherUserID":faker.date.recent(),
    "TeacherStateID":faker.date.recent(),
    "TeacherEmail":faker.date.recent(),
    "TeacherFirstName":faker.date.recent(),
    "TeacherMiddleName":faker.date.recent(),
    "TeacherLastName":faker.date.recent(),
    "AssessmentID":faker.date.recent(),
    "LaunchDate":faker.date.recent(),
    "CompletedDate":faker.date.recent(),
    "CompletedDateLocal":faker.date.recent(),
    "AssessmentNumber":faker.date.recent(),
    "AssessmentType":faker.date.recent(),
    "AssessmentStatus":faker.date.recent(),
    "DeactivationReason":faker.date.recent(),
    "GradePlacement":faker.date.recent(),
    "Grade":faker.date.recent(),
    "ExtraTime":faker.date.recent(),
    "Audio":faker.date.recent(),
    "ScaledScore":faker.date.recent(),
    "StandardErrorOfMeasurement":faker.date.recent(),
    "RaschScore":faker.date.recent(),
    "UnifiedScore":faker.date.recent(),
    "PartnershipForAssessmentOfReadinessForCollegeAndCareers":faker.date.recent(),
    "SmarterBalancedAssessmentConsortium":faker.date.recent(),
    "OpenGrowthScore":faker.date.recent(),
    "GradeEquivalent":faker.date.recent(),
    "PercentileRank":faker.date.recent(),
    "NormalCurveEquivalent":faker.date.recent(),
    "TotalTimeInSeconds":faker.date.recent(),
    "TotalCorrect":faker.date.recent(),
    "TotalPossible":faker.date.recent(),
    "StudentGrowthPercentileFallFall":faker.date.recent(),
    "StudentGrowthPercentileFallSpring":faker.date.recent(),
    "StudentGrowthPercentileFallWinter":faker.date.recent(),
    "StudentGrowthPercentileSpringFall":faker.date.recent(),
    "StudentGrowthPercentileSpringSpring":faker.date.recent(),
    "StudentGrowthPercentileWinterSpring":faker.date.recent(),
    "ScreeningPeriodWindowName":faker.date.recent(),
    "ScreeningWindowStartDate":faker.date.recent(),
    "ScreeningWindowEndDate":faker.date.recent(),
    "RenaissanceBenchmarkCategoryName":faker.date.recent(),
    "RenaissanceBenchmarkCategoryLevel":faker.date.recent(),
    "RenaissanceBenchmarkCategoryNumberOfLevels":faker.date.recent(),
    "RenaissanceBenchmarkCategoryMinPercentileRank":faker.date.recent(),
    "RenaissanceBenchmarkCategoryMaxPercentileRank":faker.date.recent(),
    "StateBenchmarkAssessmentName":faker.date.recent(),
    "StateBenchmarkCategoryName":faker.date.recent(),
    "StateBenchmarkProficient":faker.date.recent(),
    "StateBenchmarkCategoryLevel":faker.date.recent(),
    "StateBenchmarkNumberOfCategoryLevels":faker.date.recent(),
    "StateBenchmarkMinScaledScore":faker.date.recent(),
    "StateBenchmarkMaxScaledScore":faker.date.recent(),
    "DistrictBenchmarkCategoryName":faker.date.recent(),
    "DistrictBenchmarkProficient":faker.date.recent(),
    "DistrictBenchmarkCategoryLevel":faker.date.recent(),
    "DistrictBenchmarkNumberOfCategoryLevels":faker.date.recent(),
    "DistrictBenchmarkMinPercentileRank":faker.date.recent(),
    "DistrictBenchmarkMaxPercentileRank":faker.date.recent(),
    "SchoolBenchmarkCategoryName":faker.date.recent(),
    "SchoolBenchmarkProficient":faker.date.recent(),
    "SchoolBenchmarkCategoryLevel":faker.date.recent(),
    "SchoolBenchmarkNumberOfCategoryLevels":faker.date.recent(),
    "SchoolBenchmarkMinPercentileRank":faker.date.recent(),
    "SchoolBenchmarkMaxPercentileRank":faker.date.recent(),
    "CurrentSGP":faker.date.recent(),
    "Quantile":faker.date.recent(),
    "TakenAt":faker.date.recent(),
    "TakenAtByIPAddress":faker.date.recent(),
    "StudentDisplayID":faker.date.recent(),
    "TeacherDisplayID":faker.date.recent(),
    "SATBenchmarkCategory":faker.date.recent(),
    "ACTBenchmarkCategory":faker.date.recent(),
}


console.log(csv_schema)
// var db = new duckdb.Database(':memory:');

// var con = db.connect();

// con.run('CREATE TABLE a (i INTEGER)');
// var stmt = con.prepare('INSERT INTO a VALUES (?)');
// for (var i = 0; i < 10; i++) {
//   stmt.run(i);
// }
// stmt.finalize();
// con.all('SELECT * FROM a', function(err, res) {
//   if (err) {
//     throw err;
//   }
//   console.log(res)
// });